{"version":3,"sources":["actions/user.ts","actions/types.ts","components/private/main/header/datepicker/datepicker.tsx","actions/selectedDate.ts","components/private/main/header/header.tsx","components/private/main/main.tsx","components/private/index.tsx","components/public/header/header.tsx","components/public/main/main.tsx","components/global/loading/loading.tsx","components/global/dialog/dialog.tsx","components/public/signUp/signUp.tsx","consts/endpoint.ts","components/public/login/login.tsx","components/public/index.tsx","App.tsx","reducer/user.ts","reducer/selectedDate.ts","reducer/index.ts","serviceWorker.ts","index.tsx"],"names":["userLogin","email","name","profile","phone","jwt","dispatch","localStorage","setItem","type","MaterialUIPickers","useDispatch","selectedDate","useSelector","state","date","className","getMonth","utils","DateFnsUtils","margin","id","label","format","value","onChange","putSelectedDate","KeyboardButtonProps","useStyles","makeStyles","list","width","fullList","TemporaryDrawer","side","classes","React","useState","top","left","bottom","right","setState","redirect","dest","setRedirect","toggleDrawer","open","event","key","to","onClick","Drawer","onClose","role","onKeyDown","List","ListItem","button","_userLogout","ListItemIcon","ListItemText","primary","Divider","console","log","removeItem","Presenter","App","style","textDecoration","Button","color","AlertDialog","title","text","callBack","setOpen","handleClose","Dialog","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","validate","values","asValue","errors","test","length","isCelluar","password1","password2","loading","setLoading","dialog","setDialog","formik","useFormik","initialValues","onSubmit","axios","post","password","then","res","data","catch","err","requestMakeNewAccount","handleSubmit","TextField","handleChange","fullWidth","modal","setModal","error","requestLogin","exact","path","user","isLoggedIn","initialState","getItem","action","Date","allReducers","combineReducers","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.09bc5deb.chunk.js","sourcesContent":["import { Dispatch } from \"react\";\nimport { USER_LOGIN, USER_LOGOUT } from \"./types\";\n\ninterface IUserLogoutDispatch {\n    type: string\n}\n\nexport const userLogout = () => (dispatch: Dispatch<IUserLogoutDispatch>) => {\n    localStorage.removeItem('treduler')\n    return dispatch({\n        type: USER_LOGOUT\n    })\n}\n\ninterface IUserLoginDispatch {\n    type: string\n    email: string\n    name: string\n    phone: string\n    profile: string\n}\n\nexport const userLogin = (email: string, name: string, profile: string, phone: string, jwt: string) => (dispatch: Dispatch<IUserLoginDispatch>) => {\n\n    localStorage.setItem('treduler', jwt)\n\n    return dispatch({\n        type: USER_LOGIN,\n        email,\n        name,\n        phone,\n        profile\n    })\n}","export const USER_LOGIN = 'USER_LOGIN'\nexport const USER_LOGOUT = 'USER_LOGOUT'\n\nexport const PUT_SELECTED_DATE = 'PUT_SELECTED_DATE'","import 'date-fns';\nimport React from 'react';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport './styles.scss'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ReducerStateType } from 'types/reducer';\nimport { putSelectedDate } from 'actions/selectedDate'\n\nexport default function MaterialUIPickers() {\n    // The first commit of Material-UI\n    // const [selectedDate, setSelectedDate] = React.useState<Date | null>(\n    //     new Date(),\n    // );\n\n    const dispatch = useDispatch()\n\n    const handleDateChange = (date: Date | null) => {\n        // setSelectedDate(date);\n        if (date) {\n            dispatch(putSelectedDate(date))\n        }\n    };\n\n    const selectedDate = useSelector((state: ReducerStateType) => state.selectedDate.date);\n\n    return (\n        <div className=\"datepicker__container\">\n            <div className=\"month\">{selectedDate && selectedDate.getMonth() + 1}</div>\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n\n                <KeyboardDatePicker\n                    margin=\"normal\"\n                    id=\"date-picker-dialog\"\n                    label=\"Date picker dialog\"\n                    format=\"MM/dd/yyyy\"\n                    value={selectedDate}\n                    onChange={handleDateChange}\n                    KeyboardButtonProps={{\n                        'aria-label': 'change date',\n                    }}\n                />\n\n\n            </MuiPickersUtilsProvider>\n        </div>\n    );\n}","import { Dispatch } from \"react\";\nimport { PUT_SELECTED_DATE } from \"./types\";\n\ninterface IPutSelectedDateDispatch {\n    type: string\n    date: Date\n}\n\nexport const putSelectedDate = (date: Date) => (dispatch: Dispatch<IPutSelectedDateDispatch>) => {\n    return dispatch({\n        type: PUT_SELECTED_DATE,\n        date\n    })\n}","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MailIcon from '@material-ui/icons/Mail';\nimport DehazeIcon from '@material-ui/icons/Dehaze';\nimport { userLogout } from 'actions/user'\nimport './styles.scss'\nimport { useDispatch } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport DatePicker from './datepicker/datepicker'\n\nconst useStyles = makeStyles({\n    list: {\n        width: 250,\n    },\n    fullList: {\n        width: 'auto',\n    },\n});\n\nexport default function TemporaryDrawer() {\n    const classes = useStyles();\n    const [state, setState] = React.useState({\n        top: false,\n        left: false,\n        bottom: false,\n        right: false,\n    });\n\n    const dispatch = useDispatch()\n    const [redirect, setRedirect] = useState({\n        redirect: false,\n        dest: \"/\"\n    })\n\n    type DrawerSide = 'top' | 'left' | 'bottom' | 'right';\n    const toggleDrawer = (side: DrawerSide, open: boolean) => (\n        event: React.KeyboardEvent | React.MouseEvent,\n    ) => {\n        if (\n            event.type === 'keydown' &&\n            ((event as React.KeyboardEvent).key === 'Tab' ||\n                (event as React.KeyboardEvent).key === 'Shift')\n        ) {\n            return;\n        }\n\n        setState({ ...state, [side]: open });\n    };\n\n    const sideList = (side: DrawerSide) => (\n        <div\n            className={classes.list}\n            role=\"presentation\"\n            onClick={toggleDrawer(side, false)}\n            onKeyDown={toggleDrawer(side, false)}\n        >\n            <List>\n                <ListItem button >\n                    <div onClick={_userLogout} className=\"drawer__list__item\">\n                        <ListItemIcon><ExitToAppIcon /></ListItemIcon>\n                        <ListItemText primary={\"LOGOUT\"} />\n                    </div>\n                </ListItem>\n            </List>\n            <Divider />\n        </div>\n    );\n\n    if (redirect.redirect) {\n        return <Redirect to={redirect.dest} />\n    } else {\n        return (\n            <div className=\"private_main_header_container\">\n                <h1>\n                    Treduler\n                </h1>\n                <DatePicker />\n                <DehazeIcon className=\"navigation_icon\" onClick={toggleDrawer('left', true)} />\n                <Drawer open={state.left} onClose={toggleDrawer('left', false)}>\n                    {sideList('left')}\n                </Drawer>\n\n            </div>\n        );\n    }\n\n\n\n    function _userLogout() {\n        console.log('sad')\n        setRedirect({\n            redirect: true,\n            dest: \"/\"\n        })\n        dispatch(userLogout())\n    }\n}","import React from 'react'\nimport Header from './header/header'\n\n\nconst Presenter: React.FC = () => {\n    return <div className=\"private__main__container\">\n        <Header />\n    </div>\n}\n\nexport default Presenter","import React from \"react\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\nimport Main from './main/main'\n\nexport default function App() {\n    return <Router>\n        <Switch>\n            <Route>\n                <Main />\n            </Route>\n        </Switch>\n    </Router>\n}","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Button } from '@material-ui/core'\nimport './styles.scss'\n\nexport default function () {\n    return (\n        <div className=\"public__header\">\n            <div className=\"left\">\n                <Link to=\"/\" style={{\n                    textDecoration: 'none'\n                }}>\n                    <h1>Treduler</h1>\n                </Link>\n            </div>\n            <div className=\"right\">\n                <Link to=\"/sign-up\" style={{\n                    textDecoration: \"none\"\n                }}>\n                    <Button color=\"primary\">sign up</Button>\n                </Link>\n                <Link to=\"/sign-in\" style={{\n                    textDecoration: \"none\"\n                }}>\n                    <Button color=\"primary\">sign in</Button>\n                </Link>\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport './main.scss'\nimport Header from '../header/header'\nimport { Link } from 'react-router-dom'\n\nconst Presenter: React.FC = () => {\n    return <div className=\"main__container\">\n        <Header />\n        <div className=\"sized_box\"></div>\n        <p className=\"animated bounce content\">\n            The World Best Simple and Light Calendar Progressive Web Application\n        </p>\n        <div className=\"sized_box_height\"></div>\n        <div className=\"button__container\">\n            <Link to=\"/sign-in\">\n                <button className=\"animated rubberBand delay-2s\">\n                    GET STARTED\n            </button>\n            </Link>\n        </div>\n    </div>\n}\n\nexport default Presenter","import React from 'react'\nimport Loader from 'react-loader-spinner'\nimport './styles.scss'\n\nexport default function () {\n    return <div className=\"loading__container\">\n        <Loader\n            type=\"Plane\"\n            color=\"white\"\n        />\n    </div>\n}","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\ninterface IProps {\n    title: string\n    text: string\n    callBack: () => void\n}\n\nconst AlertDialog: React.FC<IProps> = ({\n    title,\n    text,\n    callBack\n}) => {\n    const [open, setOpen] = React.useState(true);\n\n    const handleClose = () => {\n        setOpen(false);\n        callBack()\n    };\n\n    return (\n        <div>\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        {text}\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\" autoFocus>\n                        OK!\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n\nexport default AlertDialog","import React, { useState } from 'react'\nimport Header from '../header/header'\nimport './styles.scss'\nimport { useFormik } from 'formik'\nimport { TextField, Button } from '@material-ui/core'\nimport axios from 'axios'\nimport { END_POINT } from '../../../consts/endpoint'\nimport Loading from 'components/global/loading/loading'\nimport Dialog from 'components/global/dialog/dialog'\nimport { useDispatch } from 'react-redux'\nimport { userLogin } from 'actions/user'\nimport { Redirect } from 'react-router-dom'\n\ninterface IformValue {\n    email: string\n    name: string\n    phone: string\n    password1: string\n}\n\nconst validate = (values: any) => {\n    const errors: any = {\n    };\n    console.log('values: ', values)\n    if (!values.email) {\n        errors.email = 'Required';\n    } else if (!isEmail(values.email)) {\n        errors.email = 'Invalid email format'\n    }\n\n    if (!values.name) {\n        errors.name = 'Required'\n    } else if (values.name.length < 2) {\n        errors.name = 'name should contain at least two characters'\n    }\n\n    if (!values.phone) {\n        errors.phone = 'Required'\n    } else if (!isCelluar(values.phone)) {\n        errors.phone = 'Invalid phone number format'\n    } else if (values.phone.length < 10) {\n        errors.phone = 'Too short'\n    } else if (values.phone.length > 11) {\n        errors.phone = 'Too long'\n    }\n\n    if (!values.password1) {\n        errors.password1 = 'Required'\n    } else if (values.password1.length < 6) {\n        errors.password1 = 'Password should container at least 6 characters'\n    }\n\n    if (!values.password2) {\n        errors.password2 = 'Required'\n    } else if (values.password1 !== values.password2) {\n        errors.password2 = 'Double check your password'\n    }\n\n    return errors\n\n\n}\n\nconst Presenter: React.FC = () => {\n\n    const [loading, setLoading] = useState(false)\n    const [dialog, setDialog] = useState(false)\n    const [redirect, setRedirect] = useState(false)\n\n    const dispatch = useDispatch()\n\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            name: '',\n            phone: '',\n            password1: '',\n            password2: ''\n        },\n        validate,\n        onSubmit: values => {\n            requestMakeNewAccount(values)\n        },\n    });\n\n    if (redirect) {\n        return <Redirect to={'/'} />\n    } else {\n        return <div className=\"public__sign_up\">\n            <Header />\n            <div className=\"logo__container\">\n                <h1 className=\"animated rubberBand logo\">Treduler</h1>\n                <span className=\"content\">sign up</span>\n            </div>\n            <div className=\"sized_box\"></div>\n            <form onSubmit={formik.handleSubmit}>\n                <div className=\"row\">\n                    <TextField\n                        id=\"email\"\n                        name=\"email\"\n                        type=\"email\"\n                        label=\"email\"\n                        onChange={formik.handleChange}\n                        fullWidth={true}\n                        value={formik.values.email}\n                    />\n                </div>\n                <div className=\"error_message\">\n                    {formik.errors.email ? formik.errors.email : \"\"}\n                </div>\n                <div className=\"row\">\n                    <TextField\n                        id=\"name\"\n                        name=\"name\"\n                        type=\"name\"\n                        label=\"name\"\n                        onChange={formik.handleChange}\n                        fullWidth={true}\n                        value={formik.values.name}\n                    />\n                </div>\n                <div className=\"error_message\">\n                    {formik.errors.name ? formik.errors.name : \"\"}\n                </div>\n                <div className=\"row\">\n                    <TextField\n                        id=\"phone\"\n                        name=\"phone\"\n                        type=\"phone\"\n                        label=\"phone\"\n                        onChange={formik.handleChange}\n                        fullWidth={true}\n                        value={formik.values.phone}\n                    />\n                </div>\n                <div className=\"error_message\">\n                    {formik.errors.phone ? formik.errors.phone : \"\"}\n                </div>\n                <div className=\"row\">\n                    <TextField\n                        id=\"password1\"\n                        name=\"password1\"\n                        label=\"password\"\n                        type=\"password\"\n                        onChange={formik.handleChange}\n                        fullWidth={true}\n                        value={formik.values.password1}\n                    />\n                </div>\n                <div className=\"error_message\">\n                    {formik.errors.password1 ? formik.errors.password1 : \"\"}\n                </div>\n                <div className=\"row\">\n                    <TextField\n                        id=\"password2\"\n                        name=\"password2\"\n                        type=\"password\"\n                        label=\"double check password\"\n                        onChange={formik.handleChange}\n                        fullWidth={true}\n                        value={formik.values.password2}\n                    />\n                </div>\n                <div className=\"error_message\">\n                    {formik.errors.password2 ? formik.errors.password2 : \"\"}\n                </div>\n                <div className=\"button__container\">\n                    <Button type=\"submit\" color=\"primary\">submit</Button>\n                </div>\n\n            </form>\n            {loading && <Loading />}\n            {dialog && <Dialog\n                title={\"Warning!\"}\n                text={\"Already existing account\"}\n                callBack={() => {\n                    setDialog(false)\n                }}\n            />}\n        </div>\n    }\n\n\n\n    function requestMakeNewAccount(values: IformValue) {\n        setLoading(true)\n        const { email, name, password1, phone } = values\n        axios.post(`${END_POINT}/user/new-account`, {\n            email,\n            name,\n            password: password1,\n            phone\n        })\n            .then(res => res.data)\n            .then(data => {\n                setLoading(false)\n                setRedirect(true)\n                const { name, email, phone, jwt, profile } = data as {\n                    name: string\n                    email: string\n                    phone: string\n                    jwt: string\n                    profile: string\n                }\n                dispatch(userLogin(\n                    email,\n                    name,\n                    profile,\n                    phone,\n                    jwt\n                ))\n            })\n            .catch(err => {\n                setLoading(false)\n                setDialog(true)\n                console.log('error: ', err)\n            })\n    }\n\n\n\n\n}\n\nfunction isEmail(asValue: string) {\n\n    var regExp = /^[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*\\.[a-zA-Z]{2,3}$/i;\n\n    return regExp.test(asValue); // 형식에 맞는 경우 true 리턴\t\n\n}\n\nfunction isCelluar(asValue: string) {\n\n    var regExp = /^[0-9]+$/;\n    return regExp.test(asValue); // 형식에 맞는 경우 true 리턴\n\n}\n\n\n\n\nexport default Presenter","export let END_POINT = 'http://localhost:4000/api'","import React, { useState } from 'react'\nimport Header from '../header/header'\nimport './styles.scss'\nimport { useFormik } from 'formik'\nimport { TextField, Button } from '@material-ui/core'\nimport axios from 'axios'\nimport Loading from 'components/global/loading/loading'\nimport Modal from 'components/global/dialog/dialog'\nimport { END_POINT } from 'consts/endpoint'\nimport { useDispatch } from 'react-redux'\nimport { userLogin } from 'actions/user'\nimport { Redirect } from 'react-router-dom'\n\nconst validate = (values: any) => {\n    const errors: any = {\n    };\n    if (!values.email) {\n        errors.email = 'Required';\n    } else if (!isEmail(values.email)) {\n        errors.email = 'Invalid email format'\n    }\n\n\n    if (!values.password) {\n        errors.password = 'Required'\n    } else if (values.password.length < 6) {\n        errors.password = 'Password should container at least 6 characters'\n    }\n\n\n    return errors\n\n\n}\n\nconst Presenter: React.FC = () => {\n\n    const [loading, setLoading] = useState(false)\n    const [modal, setModal] = useState(false)\n    const [redirect, setRedirect] = useState(false)\n\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n\n        },\n        validate,\n        onSubmit: values => {\n            requestLogin(values)\n        },\n    });\n\n    if (redirect) {\n        return <Redirect to=\"/\" />\n    } else {\n        return <div className=\"public__sign_up\">\n            <Header />\n            <div className=\"logo__container\">\n                <h1 className=\"animated rubberBand logo\">Treduler</h1>\n                <span className=\"content\">sign up</span>\n            </div>\n            <div className=\"sized_box\"></div>\n            <form onSubmit={formik.handleSubmit}>\n                <div className=\"row\">\n                    <TextField\n                        id=\"email\"\n                        name=\"email\"\n                        type=\"email\"\n                        label=\"email\"\n                        onChange={formik.handleChange}\n                        fullWidth={true}\n                        value={formik.values.email}\n                    />\n                </div>\n                <div className=\"error_message\">\n                    {formik.errors.email ? formik.errors.email : \"\"}\n                </div>\n                <div className=\"row\">\n                    <TextField\n                        id=\"password\"\n                        name=\"password\"\n                        label=\"password\"\n                        type=\"password\"\n                        onChange={formik.handleChange}\n                        fullWidth={true}\n                        value={formik.values.password}\n                    />\n                </div>\n                <div className=\"error_message\">\n                    {formik.errors.password ? formik.errors.password : \"\"}\n                </div>\n                <div className=\"button__container\">\n                    <Button type=\"submit\" color=\"primary\">submit</Button>\n                </div>\n            </form>\n            {loading && <Loading />}\n            {modal && <Modal\n                title={\"Warning\"}\n                text={\"Please check again your password and email\"}\n                callBack={() => {\n                    setModal(false)\n                }}\n            />}\n        </div>\n    }\n\n\n\n\n    function requestLogin(values: {\n        email: string\n        password: string\n    }) {\n        setLoading(true)\n        const { email, password } = values;\n        axios.post(`${END_POINT}/user/login`, {\n            email,\n            password\n        })\n            .then(res => res.data)\n            .then(data => {\n                const { email, profile, name, phone, jwt } = data as {\n                    email: string\n                    profile: string\n                    name: string\n                    phone: string\n                    jwt: string\n                }\n\n                setLoading(false)\n                setRedirect(true)\n                dispatch(userLogin(email, profile, profile, phone, jwt))\n            })\n            .catch(err => {\n                console.error(err)\n                setLoading(false)\n                setModal(true)\n            })\n    }\n}\n\n\n\nfunction isEmail(asValue: string) {\n\n    var regExp = /^[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*\\.[a-zA-Z]{2,3}$/i;\n\n    return regExp.test(asValue); // 형식에 맞는 경우 true 리턴\t\n\n}\n\n\n\n\n\n\nexport default Presenter","import React from \"react\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\nimport Main from './main/main'\nimport SignUp from './signUp/signUp'\nimport Login from './login/login'\n\nexport default function App() {\n    return <Router>\n        <Switch>\n            <Route exact path=\"/sign-up\">\n                <SignUp />\n            </Route>\n            <Route exact path=\"/sign-in\">\n                <Login />\n            </Route>\n            <Route>\n                <Main />\n            </Route>\n        </Switch>\n    </Router>\n}","import React from 'react';\nimport Private from './components/private'\nimport Public from './components/public'\nimport { useSelector } from 'react-redux';\nimport { ReducerStateType } from './types/reducer';\n\nfunction App() {\n\n  const userReducer = useSelector((state: ReducerStateType) => state.user)\n\n  if (userReducer.isLoggedIn) {\n    return <Private />\n  } else {\n    return <Public />\n  }\n}\n\nexport default App;\n","import { ReducerUserType } from \"../types/reducer\";\nimport { USER_LOGIN, USER_LOGOUT } from \"actions/types\";\n\ninterface ActionType {\n    type: string\n    email: string\n    name: string\n    phone: string\n    profile: string\n}\n\nconst initialState: ReducerUserType = {\n    email: \"\",\n    name: \"\",\n    phone: \"\",\n    profile: \"\",\n    isLoggedIn: localStorage.getItem('treduler') ? true : false\n}\n\nexport default function (state = initialState, action: ActionType): ReducerUserType {\n    switch (action.type) {\n        case USER_LOGIN:\n            return userLogin(state, action)\n        case USER_LOGOUT:\n            return userLogout(state, action)\n        default:\n            return state\n    }\n}\n\nfunction userLogout(state: ReducerUserType, action: ActionType): ReducerUserType {\n    return {\n        email: \"\",\n        name: \"\",\n        phone: \"\",\n        profile: \"\",\n        isLoggedIn: false\n    }\n}\n\nfunction userLogin(state: ReducerUserType, action: ActionType): ReducerUserType {\n    const { email, name, phone, profile } = action\n    return {\n        ...state,\n        email,\n        name,\n        phone,\n        profile,\n        isLoggedIn: true\n    }\n}","import { ReducerSelectedDate } from \"types/reducer\";\nimport { PUT_SELECTED_DATE } from \"actions/types\";\n\ninterface ActionType {\n    type: string\n    date: Date\n}\n\nconst initialState: ReducerSelectedDate = {\n    date: new Date()\n}\n\nexport default function (state = initialState, action: ActionType): ReducerSelectedDate {\n    switch (action.type) {\n        case PUT_SELECTED_DATE:\n            return putSelectedDate(state, action)\n        default:\n            return state\n    }\n}\n\nfunction putSelectedDate(state: ReducerSelectedDate, action: ActionType): ReducerSelectedDate {\n    return {\n        ...state,\n        date: action.date\n    }\n}\n","import {\n    createStore,\n    combineReducers,\n    applyMiddleware,\n    compose\n} from 'redux'\nimport thunk from 'redux-thunk'\nimport user from './user'\nimport selectedDate from './selectedDate'\n\nconst initialState = {}\n\nconst allReducers = combineReducers({\n    user,\n    selectedDate\n})\n// @ts-ignore\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(allReducers, initialState, composeEnhancer(applyMiddleware(thunk)))\n\nexport default store","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport store from './reducer'\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Provider store={store}>\n    <App />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}